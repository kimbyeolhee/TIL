{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"3_기본 CNN 구현","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMbSWCkEgG23zkob09ddKHe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"kCELOdzIsyIs"},"source":["import tensorflow as tf\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E3_RVXM308tK"},"source":["EPOCHS = 10"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SSZoM3yl0-e2"},"source":["# 모델 정의"]},{"cell_type":"code","metadata":{"id":"R1RNRpzA0-Hq"},"source":["class ConvNet(tf.keras.Model):\n","  def __init__(self):\n","    super(ConvNet, self).__init__()\n","    conv2d = tf.keras.layers.Conv2D\n","    maxpool = tf.keras.layers.MaxPool2D\n","    self.sequence = list()\n","    self.sequence.append(conv2d(16, (3, 3), padding='same', activation='relu')) # 1. 필터 수, 2. 커널\n","    self.sequence.append(conv2d(16, (3, 3), padding='same', activation='relu')) # 28x28x16\n","    self.sequence.append(maxpool((2,2))) # 14x14x16\n","    self.sequence.append(conv2d(32, (3, 3), padding='same', activation='relu')) # 14x14x32\n","    self.sequence.append(conv2d(32, (3, 3), padding='same', activation='relu')) # 14x14x32\n","    self.sequence.append(maxpool((2,2))) # 7x7x32\n","    self.sequence.append(conv2d(64, (3, 3), padding='same', activation='relu')) # 7x7x64\n","    self.sequence.append(conv2d(64, (3, 3), padding='same', activation='relu')) # 7x7x64\n","    self.sequence.append(tf.keras.layers.Flatten()) # 1568\n","    self.sequence.append(tf.keras.layers.Dense(128, activation='relu'))\n","    self.sequence.append(tf.keras.layers.Dense(10, activation='softmax'))\n","\n","  def call(self, x, training=False, mask=None):\n","    for layer in self.sequence:\n","      x = layer(x)\n","    return x"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YQfu6-5_314O"},"source":["# 학습, 테스트 루프 정의"]},{"cell_type":"code","metadata":{"id":"IG8AmmWu3xvN"},"source":["# 학습 루프\n","@tf.function\n","def train_step(model, images, labels, loss_object, optimizer, train_loss, train_accuracy):\n","  # GradientTape은 자동 미분을 통해 동적으로 Gradient 값들을 확인해 볼 수 있다는 장점\n","  with tf.GradientTape() as tape: \n","    predictions = model(images)\n","    loss = loss_object(labels, predictions)\n","  gradients = tape.gradient(loss, model.trainable_variables)\n","\n","  optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n","  train_loss(loss)\n","  train_accuracy(labels, predictions)\n","\n","# 테스트 루프\n","@tf.function\n","def test_step(model, images, labels, loss_object, test_loss, test_accuracy):\n","  predictions = model(images)\n","\n","  t_loss = loss_object(labels, predictions)\n","  test_loss(t_loss)\n","  test_accuracy(labels, predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fULx0Xnx5Grb"},"source":["# 데이터 셋"]},{"cell_type":"code","metadata":{"id":"9-JZznyW5FsF"},"source":["mnist = tf.keras.datasets.mnist\n","\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","x_train, x_test = x_train / 255.0, x_test / 255.0\n","\n","# x_train : (NUM_SAMPLE, 28, 28) -> (NUM_SAMPLE, 28, 28, 1)\n","x_train = x_train[..., tf.newaxis].astype(np.float32)\n","x_test = x_test[..., tf.newaxis].astype(np.float32)\n","\n","train_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(10000).batch(32)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(32)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rvIsq_1V5KRB"},"source":["# 학습환경 정의"]},{"cell_type":"markdown","metadata":{"id":"mNLvUyfK5NAQ"},"source":["### 모델 생성"]},{"cell_type":"code","metadata":{"id":"c7V_O4tS5JRM"},"source":["model = ConvNet()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ns5ogn5y5USN"},"source":["### 손실함수, 최적화 알고리즘 정의"]},{"cell_type":"code","metadata":{"id":"DRjKODWU5PM8"},"source":["loss_object = tf.keras.losses.SparseCategoricalCrossentropy()\n","optimizer = tf.keras.optimizers.Adam()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EH1HGCEc5cw0"},"source":["### 평가지표 정의"]},{"cell_type":"code","metadata":{"id":"mN08xanO5cXj"},"source":["train_loss = tf.keras.metrics.Mean(name='train_loss')\n","train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')\n","\n","test_loss = tf.keras.metrics.Mean(name='test_loss')\n","test_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VvOXp12J5hcl"},"source":["# 학습 루프 실행"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TG-v5xNE5gfD","executionInfo":{"status":"ok","timestamp":1634805406504,"user_tz":-540,"elapsed":1152452,"user":{"displayName":"김별희","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06602448826503759202"}},"outputId":"2e18cfbc-05ab-4675-c11e-6ff6cba176e9"},"source":["for epoch in range(EPOCHS):\n","  for images, labels in train_ds:\n","    train_step(model, images, labels, loss_object, optimizer, train_loss, train_accuracy)\n","\n","  for test_images, test_lables in test_ds:\n","    test_step(model, test_images, test_lables ,loss_object, test_loss, test_accuracy)\n","\n","  template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}'\n","  print(template.format(epoch + 1,\n","                          train_loss.result(),\n","                          train_accuracy.result() * 100,\n","                          test_loss.result(),\n","                          test_accuracy.result() * 100))\n","  train_loss.reset_states()\n","  train_accuracy.reset_states()\n","  test_loss.reset_states()\n","  test_accuracy.reset_states()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1, Loss: 0.07993253320455551, Accuracy: 97.48332977294922, Test Loss: 0.040006913244724274, Test Accuracy: 98.76000213623047\n","Epoch 2, Loss: 0.031131882220506668, Accuracy: 99.02166748046875, Test Loss: 0.02973877266049385, Test Accuracy: 99.08999633789062\n","Epoch 3, Loss: 0.023602625355124474, Accuracy: 99.28333282470703, Test Loss: 0.02996348962187767, Test Accuracy: 99.04999542236328\n","Epoch 4, Loss: 0.01954839937388897, Accuracy: 99.3550033569336, Test Loss: 0.03053249605000019, Test Accuracy: 99.06999969482422\n","Epoch 5, Loss: 0.016184251755475998, Accuracy: 99.5233383178711, Test Loss: 0.025797950103878975, Test Accuracy: 99.19999694824219\n","Epoch 6, Loss: 0.013611053116619587, Accuracy: 99.57333374023438, Test Loss: 0.03462739661335945, Test Accuracy: 99.08000183105469\n","Epoch 7, Loss: 0.013652373105287552, Accuracy: 99.55166625976562, Test Loss: 0.024983670562505722, Test Accuracy: 99.33000183105469\n","Epoch 8, Loss: 0.011911948211491108, Accuracy: 99.64833068847656, Test Loss: 0.026905342936515808, Test Accuracy: 99.22000122070312\n","Epoch 9, Loss: 0.010360334999859333, Accuracy: 99.6683349609375, Test Loss: 0.030918249860405922, Test Accuracy: 99.29999542236328\n","Epoch 10, Loss: 0.010066245682537556, Accuracy: 99.69666290283203, Test Loss: 0.02734152041375637, Test Accuracy: 99.22999572753906\n"]}]},{"cell_type":"code","metadata":{"id":"ACiT5Z2Q6B91"},"source":[""],"execution_count":null,"outputs":[]}]}